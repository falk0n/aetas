1. Beschreibung/1.1. Einleitung
Kubernetes hat sich als De-Facto-Standard für die Orchestrierung von Containern in der Public und Private Cloud etabliert. Auch für IoT und andere Anwendungsfälle ist Kubernetes im Einsatz, mit K3S gibt es beispielsweise eine Edition, die für sehr kleine Server wie Einplatinencomputer gedacht ist. Auch der sogenannte Cloud Native Stack, der aus vielen verschiedenen Komponenten besteht, baut auf dem von Kubernetes etablierten Standard auf.

1. Beschreibung/1.1. Einleitung
Der Begriff Container bezeichnet eine Technik, bei der ein Host-System Anwendungen parallel in separierten Umgebungen ausführt (Operating System Level Virtualization). In den meisten Fällen erfolgt die Überwachung, das Starten und Beenden und die weitere Verwaltung der Container durch eine Verwaltungssoftware, die somit die sogenannte Orchestrierung übernimmt. Kubernetes fasst dabei einen oder mehrere zusammengehörige Container in einem Pod zusammen. Da der Fokus des Bausteins auf Kubernetes liegt, wird im Weiteren nur von Pods und nicht von einzelnen Containern gesprochen. Die Orchestrierung erfolgt dabei zumeist in Gruppen von gemeinsam verwalteten Kubernetes-Nodes in einem oder mehreren sogenannten Clustern.

1. Beschreibung/1.1. Einleitung
Um die Orchestrierung von Pods zu betreiben und diese zu verwalten, haben sich mehrere Produkte etabliert, die es erlauben, auch sehr große Umgebungen zu bedienen. In ihrem Kern setzen allerdings alle auf Kubernetes auf. Bei der Betrachtung ist zwischen der Runtime, die die Prozesse auf den Kubernetes-Nodes betreibt, und der Orchestrierung, die die Runtimes auf mehreren Kubernetes-Nodes steuert, zu unterscheiden.

1. Beschreibung/1.1. Einleitung
Zusätzlich zu diesen beiden zentralen Komponenten besteht der Betrieb von Kubernetes in den meisten Fällen noch aus einer spezialisierten Infrastruktur, zu der z. B. Registries, Code-Versionierung und -Speicherung, Automatisierungswerkzeuge, Verwaltungsserver, Speichersysteme oder virtuelle Netze gehören.

1. Beschreibung/1.1. Einleitung
Die folgenden Begriffe werden im Baustein in dieser Bedeutung verwendet: Anwendung bezeichnet eine Zusammenstellung mehrerer Programme, die gemeinsam eine Aufgabe erfüllen Cluster sind Betriebsumgebungen für Container mit mehreren Nodes Container sind aus einem Image gestartete Prozesse, die innerhalb von Betriebssystem-Namespaces laufen Container Network Interface (CNI) bezeichnet die Schnittstelle zur Verwaltung der virtuellen Netze im Cluster Container Storage Interface (CSI) bezeichnet die Schnittstelle zu den zumeist externen Speichersystemen, die Kubernetes den Pods bereitstellen kann Control Plane bezeichnet alle für die Verwaltung, also Orchestrierung der Nodes, Runtimes und Cluster eingesetzten Anwendungen Images sind alle der Open Container Initiative (OCI) entsprechenden Software-Pakete, diese umfassen sowohl Basis-Images für eigene Images als auch solche Images, die unverändert im Einsatz sind Node bezeichnet einen Server, der für den Betrieb der Runtime installiert und optimiert ist Pod bezeichnet eine Sammlung mehrerer Container, die innerhalb der gleichen Betriebssystem-Namespaces laufen Registry ist der Oberbegriff für die Code-Verwaltung und die Speicherung der Images Runtime bezeichnet die Software, die die Software im Image als Container startet

1. Beschreibung/1.2. Zielsetzung
Ziel dieses Bausteins ist der Schutz von Informationen, die in Kubernetes-Clustern verarbeitet, angeboten oder darüber übertragen werden.

1. Beschreibung/1.3. Abgrenzung und Modellierung
Der Baustein APP.4.4 Kubernetes ist immer zusammen mit dem Baustein SYS.1.6 Containerisierung anzuwenden. Dabei ist es bezogen auf den Fokus des vorliegenden Bausteins nicht relevant, welche Container-Runtime im Einsatz ist oder welche zusätzlichen Anwendungen Teil der Control Plane sind.

1. Beschreibung/1.3. Abgrenzung und Modellierung
Der Baustein enthält grundsätzliche Anforderungen zur Einrichtung, zum Betrieb und zur Orchestrierung mit Kubernetes sowie zur spezialisierten Infrastruktur, die zum Betrieb notwendig ist. Letzteres beinhaltet Registries, CSI/CNI, Nodes und Automatisierungssoftware, soweit sie direkt mit dem Cluster interagieren. Die Anforderungen für diese Anwendungen beziehen sich zumeist auf die Schnittstellen, enthalten aber auch Anforderungen, die den Betrieb dieser Anwendungen betreffen, sofern sie direkt die Sicherheit des Clusters berühren. Weitere im Kubernetes-Umfeld übliche Dienste, wie z. B. Automatisierung für CI/CD-Pipelines und Codeverwaltung in z. B. Git, behandelt der Baustein nicht in der Tiefe.

1. Beschreibung/1.3. Abgrenzung und Modellierung
Der Baustein modelliert umfassend einen Cluster. Die Anwendungen der Control Plane, Dienste zur Automatisierung und die Nodes, sind hier als eine Gruppe zu sehen und zu behandeln.

1. Beschreibung/1.3. Abgrenzung und Modellierung
Sicherheitsanforderungen für die in Kubernetes-Clustern betriebenen Dienste, wie z. B. Webserver (APP.3.2 Webserver) oder E-Mail-Server (siehe APP.5.3 Allgemeiner E-Mail-Client und -Server), sind Gegenstand eigener Bausteine.

2. Gefährdungslage
Da IT-Grundschutz-Bausteine nicht auf individuelle Informationsverbünde eingehen können, werden zur Darstellung der Gefährdungslage typische Szenarien zugrunde gelegt. Die folgenden spezifischen Bedrohungen und Schwachstellen sind für den Baustein APP.4.4 Kubernetes von besonderer Bedeutung.

2. Gefährdungslage/2.1. Mangelhafte Authentisierung und Autorisierung in der Control Plane
Um Runtimes, Nodes und auch Kubernetes selbst zu verwalten, benötigen sowohl Administrierende als auch die toolgestützte Bereitstellung administrative Zugänge. Diese Zugänge sind entweder als Unix-Sockets oder Netzports ausgeführt. Mechanismen zur Authentisierung und Verschlüsselung der administrativen Zugänge sind häufig vorhanden, aber nicht bei allen Produkten standardmäßig aktiviert.

2. Gefährdungslage/2.1. Mangelhafte Authentisierung und Autorisierung in der Control Plane
Wenn Unbefugte auf das Datennetz oder auf die Nodes zugreifen, können sie über ungeschützte administrative Zugänge Befehle ausführen, die der Verfügbarkeit, Vertraulichkeit und Integrität der verarbeiteten Daten schaden können.

2. Gefährdungslage/2.2. Vertraulichkeitsverlust von Zugangsdaten
Oft benötigen Pods Zugangsdaten (Access Token) für Kubernetes. Über einen Angriff auf den Pod können diese Zugangsdaten in unbefugte Hände gelangen. Mit diesen Zugangsdaten ist es bei Angriffen möglich, mit der Control Plane authentifiziert zu interagieren und, sofern die Berechtigungen ausreichen, auch Veränderungen an der Orchestrierung vorzunehmen.

2. Gefährdungslage/2.3. Ressourcenkonflikte auf Nodes
Einzelne Pods können den Node oder auch die Orchestrierung überlasten und so die Verfügbarkeit aller anderen Pods auf dem Node oder auch den Betrieb des Nodes selbst gefährden.

2. Gefährdungslage/2.4. Unautorisierte Änderungen an Clustern
Die Automatisierung mit CI/CD und die daraus folgende Notwendigkeit, den Werkzeugen privilegierte Zugangsberechtigungen zu erteilen, birgt das Risiko, dass nicht autorisierte Änderungen an Clustern erfolgen. So kann z. B. eine neue Version einer Anwendung auf dem Cluster aufgebracht werden, die nicht ausreichend getestet ist oder die den Freigabeprozess nicht durchlaufen hat. Auch ist es bei Fehlern in den Berechtigungen auf der CI/CD-Umgebung möglich, dass Schadsoftware in die Cluster eindringen und dort Daten auslesen, löschen oder verändern kann.

2. Gefährdungslage/2.5. Unberechtigte Kommunikation
Alle Pods in einem Cluster sind grundsätzlich in der Lage, miteinander, mit den Nodes im eigenen Cluster sowie beliebigen anderen IT-Systemen zu kommunizieren. Sofern diese Kommunikation nicht eingeschränkt ist, kann dies ausgenutzt werden, um z. B. die Control Plane, andere Pods oder die Nodes anzugreifen.

2. Gefährdungslage/2.5. Unberechtigte Kommunikation
Auch besteht die Gefahr, dass Pods im Cluster unerwünscht von außen erreichbar sind. So kann ein Angriff gegen Dienste, die eigentlich nur innerhalb des Clusters erreichbar sein sollten, von außen erfolgen. Diese Gefährdung wird durch die geringere Aufmerksamkeit verschlimmert, die internen Diensten oft entgegengebracht wird. Wird z. B. eine Verwundbarkeit auf einem nur intern eingesetzten Dienst toleriert und ist dieser auch von außen erreichbar, gefährdet dies den gesamten Cluster erheblich.

3. Anforderungen
Im Folgenden sind die spezifischen Anforderungen des Bausteins APP.4.4 Kubernetes aufgeführt. Der oder die Informationssicherheitsbeauftragte (ISB) ist dafür zuständig, dass alle Anforderungen gemäß dem festgelegten Sicherheitskonzept erfüllt und überprüft werden. Bei strategischen Entscheidungen ist der oder die ISB stets einzubeziehen.

3. Anforderungen
Im IT-Grundschutz-Kompendium sind darüber hinaus weitere Rollen definiert. Sie sollten besetzt werden, insofern dies sinnvoll und angemessen ist.

3. Anforderungen/3.1. Basis-Anforderungen
Die folgenden Anforderungen MÜSSEN für diesen Baustein vorrangig erfüllt werden.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A1 Planung der Separierung der Anwendungen (B)
Vor der Inbetriebnahme MUSS geplant werden, wie die in den Pods betriebenen Anwendungen und deren unterschiedlichen Test- und Produktions-Betriebsumgebungen separiert werden. Auf Basis des Schutzbedarfs der Anwendungen MUSS festgelegt werden, welche Architektur der Namespaces, Meta-Tags, Cluster und Netze angemessen auf die Risiken eingeht und ob auch virtualisierte Server und Netze zum Einsatz kommen sollen.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A1 Planung der Separierung der Anwendungen (B)
Die Planung MUSS Regelungen zu Netz-, CPU- und Festspeicherseparierung enthalten. Die Separierung SOLLTE auch das Netzzonenkonzept und den Schutzbedarf beachten und auf diese abgestimmt sein.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A1 Planung der Separierung der Anwendungen (B)
Anwendungen SOLLTEN jeweils in einem eigenen Kubernetes-Namespace laufen, der alle Programme der Anwendung umfasst. Nur Anwendungen mit ähnlichem Schutzbedarf und ähnlichen möglichen Angriffsvektoren SOLLTEN einen Kubernetes-Cluster teilen.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A2 Planung der Automatisierung mit CI/CD (B)
Wenn eine Automatisierung des Betriebs von Anwendungen in Kubernetes mithilfe von CI/CD stattfindet, DARF diese NUR nach einer geeigneten Planung erfolgen. Die Planung MUSS den gesamten Lebenszyklus von Inbetrieb- bis Außerbetriebnahme inklusive Entwicklung, Tests, Betrieb, Überwachung und Updates umfassen. Das Rollen- und Rechtekonzept sowie die Absicherung von Kubernetes Secrets MÜSSEN Teil der Planung sein.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A3 Identitäts- und Berechtigungsmanagement bei Kubernetes (B)
Kubernetes und alle anderen Anwendungen der Control Plane MÜSSEN jede Aktion eines Benutzenden oder, im automatisierten Betrieb, einer entsprechenden Software authentifizieren und autorisieren, unabhängig davon, ob die Aktionen über einen Client, eine Weboberfläche oder über eine entsprechende Schnittstelle (API) erfolgt. Administrative Handlungen DÜRFEN NICHT anonym erfolgen.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A3 Identitäts- und Berechtigungsmanagement bei Kubernetes (B)
Benutzende DÜRFEN NUR die unbedingt notwendigen Rechte erhalten. Berechtigungen ohne Einschränkungen MÜSSEN sehr restriktiv vergeben werden.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A3 Identitäts- und Berechtigungsmanagement bei Kubernetes (B)
Nur ein kleiner Kreis von Personen SOLLTE berechtigt sein, Prozesse der Automatisierung zu definieren. Nur ausgewählte Administrierende SOLLTEN in Kubernetes das Recht erhalten, Freigaben für Festspeicher (Persistent Volumes) anzulegen oder zu ändern.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A4 Separierung von Pods (B)
Der Betriebssystem-Kernel der Nodes MUSS über Isolationsmechanismen zur Beschränkung von Sichtbarkeit und Ressourcennutzung der Pods untereinander verfügen (vergleiche Linux Namespaces und cgroups). Die Trennung MUSS dabei mindestens IDs von Prozessen sowie Benutzenden, Inter-Prozess-Kommunikation, Dateisystem und Netz inklusive Hostname umfassen.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A5 Datensicherung im Cluster (B)
Es MUSS eine Datensicherung des Clusters erfolgen. Die Datensicherung MUSS umfassen: Festspeicher (Persistent Volumes), Konfigurationsdateien von Kubernetes und den weiteren Programmen der Control Plane, den aktuellen Zustand des Kubernetes-Clusters inklusive der Erweiterungen, Datenbanken der Konfiguration, namentlich hier etcd, alle Infrastrukturanwendungen, die zum Betrieb des Clusters und der darin befindlichen Dienste notwendig sind und die Datenhaltung der Code und Image Registries.

3. Anforderungen/3.1. Basis-Anforderungen/APP.4.4.A5 Datensicherung im Cluster (B)
Es SOLLTEN auch Snapshots für den Betrieb der Anwendungen betrachtet werden. Snapshots DÜRFEN die Datensicherung NICHT ersetzen.

3. Anforderungen/3.2. Standard-Anforderungen
Gemeinsam mit den Basis-Anforderungen entsprechen die folgenden Anforderungen dem Stand der Technik für diesen Baustein. Sie SOLLTEN grundsätzlich erfüllt werden.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A6 Initialisierung von Pods (S)
Sofern im Pod zum Start eine Initialisierung z. B. einer Anwendung erfolgt, SOLLTE diese in einem eigenen Init-Container stattfinden. Es SOLLTE sichergestellt sein, dass die Initialisierung alle bereits laufenden Prozesse beendet. Kubernetes SOLLTE nur bei erfolgreicher Initialisierung die weiteren Container starten.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A7 Separierung der Netze bei Kubernetes (S)
Die Netze für die Administration der Nodes, der Control Plane sowie die einzelnen Netze der Anwendungsdienste SOLLTEN separiert werden.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A7 Separierung der Netze bei Kubernetes (S)
Es SOLLTEN NUR die für den Betrieb notwendigen Netzports der Pods in die dafür vorgesehenen Netze freigegeben werden. Bei mehreren Anwendungen auf einem Kubernetes-Cluster SOLLTEN zunächst alle Netzverbindungen zwischen den Kubernetes-Namespaces untersagt und nur benötigte Netzverbindungen gestattet sein (Whitelisting). Die zur Administration der Nodes, der Runtime und von Kubernetes inklusive seiner Erweiterungen notwendigen Netzports SOLLTEN NUR aus dem Administrationsnetz und von Pods, die diese benötigen, erreichbar sein.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A7 Separierung der Netze bei Kubernetes (S)
Nur ausgewählte Administrierende SOLLTEN in Kubernetes berechtigt sein, das CNI zu verwalten und Regeln für das Netz anzulegen oder zu ändern.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A8 Absicherung von Konfigurationsdateien bei Kubernetes (S)
Die Konfigurationsdateien des Kubernetes-Clusters, inklusive aller Erweiterungen und Anwendungen, SOLLTEN versioniert und annotiert werden.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A8 Absicherung von Konfigurationsdateien bei Kubernetes (S)
Zugangsrechte auf die Verwaltungssoftware der Konfigurationsdateien SOLLTEN minimal vergeben werden. Zugriffsrechte für lesenden und schreibenden Zugriff auf die Konfigurationsdateien der Control Plane SOLLTEN besonders sorgfältig vergeben und eingeschränkt sein.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A9 Nutzung von Kubernetes Service-Accounts (S)
Pods SOLLTEN NICHT den "default"-Service-Account nutzen. Dem "default"-Service-Account SOLLTEN keine Rechte eingeräumt werden. Pods für unterschiedliche Anwendungen SOLLTEN jeweils unter eigenen Service-Accounts laufen. Berechtigungen für die Service-Accounts der Pods der Anwendungen SOLLTEN auf die unbedingt notwendigen Rechte beschränkt werden.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A9 Nutzung von Kubernetes Service-Accounts (S)
Pods, die keinen Service-Account benötigen, SOLLTEN diesen nicht einsehen können und keinen Zugriff auf entsprechende Token haben.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A9 Nutzung von Kubernetes Service-Accounts (S)
Nur Pods der Control Plane und Pods, die diese unbedingt benötigen, SOLLTEN privilegierte Service-Accounts nutzen.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A9 Nutzung von Kubernetes Service-Accounts (S)
Programme der Automatisierung SOLLTEN jeweils eigene Token erhalten, auch wenn sie aufgrund ähnlicher Aufgaben einen gemeinsamen Service-Account nutzen.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A10 Absicherung von Prozessen der Automatisierung (S)
Alle Prozesse der Automatisierungssoftware, wie CI/CD und deren Pipelines, SOLLTEN nur mit unbedingt notwendigen Rechten arbeiten. Wenn unterschiedliche Gruppen von Benutzenden die Konfiguration über die Automatisierungssoftware verändern oder Pods starten können, SOLLTE dies für jede Gruppe durch eigene Prozesse durchgeführt werden, die nur die für die jeweilige Gruppe notwendigen Rechte besitzen.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A11 Überwachung der Container (S)
In Pods SOLLTE jeder Container einen Health Check für den Start und den Betrieb („readiness“ und „liveness“) definieren. Diese Checks SOLLTEN Auskunft über die Verfügbarkeit der im Pod ausgeführten Software geben. Die Checks SOLLTEN fehlschlagen, wenn die überwachte Software ihre Aufgaben nicht ordnungsgemäß wahrnehmen kann. Für jede dieser Kontrollen SOLLTE eine dem im Pod betriebenen Dienst angemessene Zeitspanne definieren. Auf Basis dieser Checks SOLLTE Kubernetes die Pods löschen oder neu starten.

3. Anforderungen/3.2. Standard-Anforderungen/APP.4.4.A12 Absicherung der Infrastruktur-Anwendungen (S)
Sofern eine eigene Registry für Images oder eine Software zur Automatisierung, zur Verwaltung des Festspeichers, zur Speicherung von Konfigurationsdateien oder ähnliches im Einsatz ist, SOLLTE deren Absicherung mindestens betrachten: Verwendung von personenbezogenen und Service-Accounts für den Zugang, verschlüsselte Kommunikation auf allen Netzports, minimale Vergabe der Berechtigungen an Benutzende und Service Accounts, Protokollierung der Veränderungen und regelmäßige Datensicherung.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf
Im Folgenden sind für diesen Baustein exemplarische Vorschläge für Anforderungen aufgeführt, die über dasjenige Schutzniveau hinausgehen, das dem Stand der Technik entspricht. Die Vorschläge SOLLTEN bei erhöhtem Schutzbedarf in Betracht gezogen werden. Die konkrete Festlegung erfolgt im Rahmen einer individuellen Risikoanalyse.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A13 Automatisierte Auditierung der Konfiguration (H)
Es SOLLTE ein automatisches Audit der Einstellungen der Nodes, von Kubernetes und der Pods der Anwendungen gegen eine definierte Liste der erlaubten Einstellungen und gegen standardisierte Benchmarks erfolgen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A13 Automatisierte Auditierung der Konfiguration (H)
Kubernetes SOLLTE die aufgestellten Regeln im Cluster durch Anbindung geeigneter Werkzeuge durchsetzen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A14 Verwendung dedizierter Nodes (H)
In einem Kubernetes-Cluster SOLLTEN die Nodes dedizierte Aufgaben zugewiesen bekommen und jeweils nur Pods betreiben, welche der jeweiligen Aufgabe zugeordnet sind.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A14 Verwendung dedizierter Nodes (H)
Bastion Nodes SOLLTEN alle ein- und ausgehenden Datenverbindungen der Anwendungen zu anderen Netzen übernehmen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A14 Verwendung dedizierter Nodes (H)
Management Nodes SOLLTEN die Pods der Control Plane betreiben und sie SOLLTEN nur die Datenverbindungen der Control Plane übernehmen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A14 Verwendung dedizierter Nodes (H)
Sofern eingesetzt, SOLLTEN Speicher-Nodes nur die Pods der Festspeicherdienste im Cluster betreiben.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A15 Trennung von Anwendungen auf Node- und Cluster-Ebene (H)
Anwendungen mit einem sehr hohen Schutzbedarf SOLLTEN jeweils eigene Kubernetes-Cluster oder dedizierte Nodes nutzen, die nicht für andere Anwendungen bereitstehen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A16 Verwendung von Operatoren (H)
Die Automatisierung von Betriebsaufgaben in Operatoren SOLLTE bei besonders kritischen Anwendungen und den Programmen der Control Plane zum Einsatz kommen.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A17 Attestierung von Nodes (H)
Nodes SOLLTEN eine kryptografisch und möglichst mit einem TPM verifizierte gesicherte Zustandsmeldung an die Control Plane senden. Die Control Plane SOLLTE nur Nodes in den Cluster aufnehmen, die erfolgreich ihre Unversehrtheit nachweisen konnten.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A18 Verwendung von Mikro-Segmentierung (H)
Die Pods SOLLTEN auch innerhalb eines Kubernetes-Namespace nur über die notwendigen Netzports miteinander kommunizieren können. Es SOLLTEN Regeln innerhalb des CNI existieren, die alle bis auf die für den Betrieb notwendigen Netzverbindungen innerhalb des Kubernetes-Namespace unterbinden. Diese Regeln SOLLTEN Quelle und Ziel der Verbindungen genau definieren und dafür mindestens eines der folgenden Kriterien nutzen: Service-Name, Metadaten („Labels"), die Kubernetes Service Accounts oder zertifikatsbasierte Authentifizierung.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A18 Verwendung von Mikro-Segmentierung (H)
Alle Kriterien, die als Bezeichnung für diese Verbindung dienen, SOLLTEN so abgesichert sein, dass sie nur von berechtigten Personen und Verwaltungs-Diensten verändert werden können.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A19 Hochverfügbarkeit von Kubernetes (H)
Der Betrieb SOLLTE so aufgebaut sein, dass bei Ausfall eines Standortes die Cluster und damit die Anwendungen in den Pods entweder ohne Unterbrechung weiterlaufen oder in kurzer Zeit an einem anderen Standort neu anlaufen können.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A19 Hochverfügbarkeit von Kubernetes (H)
Für den Wiederanlauf SOLLTEN alle notwendigen Konfigurationsdateien, Images, Nutzdaten, Netzverbindungen und sonstige für den Betrieb benötigten Ressourcen inklusive der zum Betrieb nötigen Hardware bereits an diesem Standort verfügbar sein.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A19 Hochverfügbarkeit von Kubernetes (H)
Für den unterbrechungsfreien Betrieb des Clusters SOLLTEN die Control Plane von Kubernetes, die Infrastruktur-Anwendungen der Cluster sowie die Pods der Anwendungen anhand von Standort-Daten der Nodes über mehrere Brandabschnitte so verteilt werden, dass der Ausfall eines Brandabschnitts nicht zum Ausfall der Anwendung führt.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A20 Verschlüsselte Datenhaltung bei Pods (H)
Die Dateisysteme mit den persistenten Daten der Control Plane (hier besonders etcd) und der Anwendungsdienste SOLLTEN verschlüsselt werden.

3. Anforderungen/3.3. Anforderungen bei erhöhtem Schutzbedarf/APP.4.4.A21 Regelmäßiger Restart von Pods (H)
Bei einem erhöhten Risiko für Fremdeinwirkung und einem sehr hohen Schutzbedarf SOLLTEN Pods regelmäßig gestoppt und neu gestartet werden. Kein Pod SOLLTE länger als 24 Stunden laufen. Dabei SOLLTE die Verfügbarkeit der Anwendungen im Pod sichergestellt sein.

4. Weiterführende Informationen/4.1. Wissenswertes
Weiterführende Informationen zu Gefährdungen und Sicherheitsmaßnahmen im Bereich Container finden sich unter anderem in folgenden Veröffentlichungen:

